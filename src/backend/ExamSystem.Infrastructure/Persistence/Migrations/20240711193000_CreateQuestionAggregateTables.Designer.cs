// <auto-generated />
using System;
using ExamSystem.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExamSystem.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ExamSystemDbContext))]
    [Migration("20240711193000_CreateQuestionAggregateTables")]
    partial class CreateQuestionAggregateTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExamSystem.Domain.Entities.McqAggregate.MultipleChoiceQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BodyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPartialMarkingAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<byte>("Score")
                        .HasColumnType("tinyint");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BodyId");

                    b.ToTable("MultipleChoiceQuestions", t =>
                        {
                            t.HasCheckConstraint("CK_MultipleChoiceQuestions_DifficultyLevel_Enum", "[DifficultyLevel] BETWEEN 1 AND 5");
                        });
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.McqAggregate.MultipleChoiceQuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BodyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<Guid>("MultipleChoiceQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BodyId");

                    b.HasIndex("MultipleChoiceQuestionId");

                    b.ToTable("MultipleChoiceQuestionOption");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.McqAggregate.MultipleChoiceQuestionTag", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MultipleChoiceQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagId", "MultipleChoiceQuestionId");

                    b.HasIndex("MultipleChoiceQuestionId");

                    b.ToTable("MultipleChoiceQuestionTag");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.Shared.Abstracts.ContentElement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Serial")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.UnaryAggregateRoots.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.UnaryAggregateRoots.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProfilePictureUri")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Members", null, t =>
                        {
                            t.HasCheckConstraint("CK_Members_Status_Enum", "[Status] BETWEEN CAST(1 AS tinyint) AND CAST(3 AS tinyint)");
                        });
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.UnaryAggregateRoots.SystemClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemClaims");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c32ad88e-09f7-c6f0-ce5b-08dc8937bc4f"),
                            Name = "Member"
                        },
                        new
                        {
                            Id = new Guid("1ef4babe-2dfa-ca2d-eb41-08dc8937be87"),
                            Name = "InternalUser"
                        },
                        new
                        {
                            Id = new Guid("3eaa627b-e56f-c685-235d-08dc8937c081"),
                            Name = "ViewDashboard"
                        },
                        new
                        {
                            Id = new Guid("7990988a-cf75-ce00-cb47-08dc8937c377"),
                            Name = "ManageMemberClaim"
                        },
                        new
                        {
                            Id = new Guid("844b3328-080f-c935-ffea-08dc8937c5b2"),
                            Name = "ManageMember"
                        },
                        new
                        {
                            Id = new Guid("abf0c086-0c63-c906-7dca-08dc8937c7e8"),
                            Name = "ManageQuestion"
                        },
                        new
                        {
                            Id = new Guid("4e70efc8-77af-c047-2c9a-08dc8937ca23"),
                            Name = "QuestionCreate"
                        },
                        new
                        {
                            Id = new Guid("ff3058a6-bcf3-c296-ba35-08dc8937cd57"),
                            Name = "QuestionView"
                        },
                        new
                        {
                            Id = new Guid("3bf76b81-16fb-cf73-09d8-08dc8937d04b"),
                            Name = "QuestionEdit"
                        },
                        new
                        {
                            Id = new Guid("b7842991-b887-cfc5-d19b-08dc8937d37f"),
                            Name = "QuestionDelete"
                        },
                        new
                        {
                            Id = new Guid("dde5d028-8ce1-cc74-c2ad-08dc8937d5f6"),
                            Name = "ManageExam"
                        },
                        new
                        {
                            Id = new Guid("ccfd2634-ada3-cc17-d019-08dc8937d82f"),
                            Name = "ExamCreate"
                        },
                        new
                        {
                            Id = new Guid("61dc3de3-65a1-c21d-da2d-08dc8937daa7"),
                            Name = "ExamView"
                        },
                        new
                        {
                            Id = new Guid("e262c5dc-94e5-c8f4-8e30-08dc8937dce0"),
                            Name = "ExamEdit"
                        },
                        new
                        {
                            Id = new Guid("684433eb-bf84-cc23-f24a-08dc8937ded9"),
                            Name = "ExamDelete"
                        },
                        new
                        {
                            Id = new Guid("589e7ea7-754e-c471-f4e3-08dc8937e29d"),
                            Name = "ManageLog"
                        });
                });

            modelBuilder.Entity("ExamSystem.Domain.Misc.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("ExamSystem.Domain.Misc.ImageElement", b =>
                {
                    b.HasBaseType("ExamSystem.Domain.Entities.Shared.Abstracts.ContentElement");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ImageElements", (string)null);
                });

            modelBuilder.Entity("ExamSystem.Domain.Misc.TextElement", b =>
                {
                    b.HasBaseType("ExamSystem.Domain.Entities.Shared.Abstracts.ContentElement");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("TextElements", (string)null);
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.McqAggregate.MultipleChoiceQuestion", b =>
                {
                    b.HasOne("ExamSystem.Domain.Misc.Content", "Body")
                        .WithMany()
                        .HasForeignKey("BodyId");

                    b.Navigation("Body");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.McqAggregate.MultipleChoiceQuestionOption", b =>
                {
                    b.HasOne("ExamSystem.Domain.Entities.Shared.Abstracts.ContentElement", "Body")
                        .WithMany()
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamSystem.Domain.Entities.McqAggregate.MultipleChoiceQuestion", null)
                        .WithMany("Options")
                        .HasForeignKey("MultipleChoiceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Body");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.McqAggregate.MultipleChoiceQuestionTag", b =>
                {
                    b.HasOne("ExamSystem.Domain.Entities.McqAggregate.MultipleChoiceQuestion", null)
                        .WithMany("Tags")
                        .HasForeignKey("MultipleChoiceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.Shared.Abstracts.ContentElement", b =>
                {
                    b.HasOne("ExamSystem.Domain.Misc.Content", null)
                        .WithMany("Elements")
                        .HasForeignKey("ContentId");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.McqAggregate.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("ExamSystem.Domain.Misc.Content", b =>
                {
                    b.Navigation("Elements");
                });
#pragma warning restore 612, 618
        }
    }
}
