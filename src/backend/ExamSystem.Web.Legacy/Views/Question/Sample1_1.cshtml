@using Microsoft.AspNetCore.Mvc.TagHelpers
@model ExamSystem.Web.Models.QuestionPaperModel
@{
    ViewData["Title"] = "Quiz";
}

@section Styles
{
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
    <link href="~/css/QuestionPaper.css" rel="stylesheet" />
}

<body class="cyan-100">
    <form style="width: 210mm; margin: 0 auto;">
        <div class="container mt-2">
            <div class="card my-3">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <h2 class="flex-grow-1">@Model.Title</h2>
                        <div class="text-right">
                            <p class="mb-0"><span class="fw-bold text-primary">Total Points:</span> @Model.TotalPoints</p>
                            <p class="mb-0"><span class="text-danger fw-bold">Time:</span> @Model.Time min</p>
                        </div>
                    </div>
                    @if (Model.Description != null)
                    {
                        <p><span class="text-danger fw-bold">Note:</span> @Model.Description</p>
                    }
                    <div id="stopwatch" class="alert alert-success font-weight-bold" role="alert">00:@Model.Time:00</div>
                </div>
            </div>
            @for (int i = 0; i < Model.Questions.Count; i++)
            {
                <div class="card my-3">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-10">
                                <h1 class="card-title">
                                    @if (i == 0)
                                    {
                                        <img src="@Model.ImageUrl" alt="Question image" width="130" height="130">
                                    }
                                    <pre class="gray-200"><strong>@Model.Questions[i]</strong></pre>
                                </h1>
                            </div>
                            <div class="col-2 text-right">
                                <p class="mb-0">@Model.Points points</p>
                            </div>
                        </div>
                        @foreach (var option in Model.Options[i])
                        {
                            <div class="row">
                                <label class="col-10">
                                    @if (option.StartsWith("http"))
                                    {
                                        <input type="checkbox" value="@option" />
                                        <img src="@option" alt="Option image" width="70" height="70">
                                    }
                                    else
                                    {
                                        <pre class="bg-white px-3 py-2 mb-0" style="font-size: 0.875rem;"><input type="checkbox" value="@option" /> @option</pre>
                                    }
                                </label>
                                <br>
                            </div>
                        }
                    </div>
                </div>
            }
            <button type="submit" id="submitBtn" class="btn btn-primary">Submit</button>
        </div>
    </form>
</body>

@section Scripts
{
    <script>
        var stopwatchDisplay = document.getElementById('stopwatch');
        var submitButton = document.getElementById('submitBtn');
        var modelTime = @Model.Time * 60 * 1000;
        var endTime = Date.now() + modelTime;
        var timerInterval;

        function startStopwatch() {
            timerInterval = setInterval(updateStopwatch, 1000);
        }

        function updateStopwatch() {
            var currentTime = Date.now();
            var remainingTime = endTime - currentTime;

            if (remainingTime <= 0) {
                remainingTime = 0;
                clearInterval(timerInterval);
                submitButton.disabled = true;
            }

            var formattedTime = formatTime(remainingTime);
            stopwatchDisplay.textContent = formattedTime;

            if (remainingTime <= 60 * 1000) {
                stopwatchDisplay.classList.remove('alert-success');
                stopwatchDisplay.classList.add('alert-danger');
            }
        }

        function formatTime(milliseconds) {
            var hours = Math.floor(milliseconds / (1000 * 60 * 60));
            var minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));
            var seconds = Math.floor((milliseconds % (1000 * 60)) / 1000);
            return (
                (hours < 10 ? '0' : '') + hours + ':' +
                (minutes < 10 ? '0' : '') + minutes + ':' +
                (seconds < 10 ? '0' : '') + seconds
            );
        }

        startStopwatch();
    </script>
}
