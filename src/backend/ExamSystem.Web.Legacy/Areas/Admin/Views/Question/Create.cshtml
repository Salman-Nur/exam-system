@using Microsoft.AspNetCore.Mvc.TagHelpers
@using System.Text.Json
@using ExamSystem.Web.Data.Entities
@using Humanizer
@model ExamSystem.Web.Areas.Admin.Models.SingleQuestionViewModel

@{
    Layout = null;
}

<!doctype html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="ie=edge"/>
    <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover"/>

    @{
        <title>Single Question</title>
    }

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true"/>
    <link href="~/tabler/css/tabler.min.css" rel="stylesheet" asp-append-version="true"/>
    <partial name="_TomSelectPartial"/>
    <partial name="_MarkdownEditorPartial"/>

    <style>
        :root {
            --tblr-font-sans-serif: 'Inter', -apple-system, BlinkMacSystemFont, San Francisco, Segoe UI, Roboto, Helvetica Neue, sans-serif;
        }

        body {
            font-feature-settings: "cv03", "cv04", "cv11";
        }
    </style>

</head>

<body>
<div class="page">
    <div class="page-wrapper">
        <div class="page-body">
            <div class="container-xl">
                <form asp-controller="Question" asp-action="Create" asp-antiforgery="true" class="mb-3">
                    <div class="card">
                        <div class="card-header">
                            <div class="row align-items-center">
                                <div class="col">
                                    <div class="card-title">Question 1</div>
                                </div>
                            </div>
                            <div class="card-actions">
                                <div class="d-flex align-items-center">
                                    <label class="form-check form-check-single form-switch">
                                        <input class="form-check-input" type="checkbox" checked>
                                    </label>
                                    <span class="ms-2 card-title">Required</span>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <div class="mb-3">
                                    <label asp-for="Title" class="form-label">
                                        Title
                                        <span class="form-label-description">
                                            <div class="dropdown">
                                                <button type="button" class="btn btn-sm dropdown-toggle" data-bs-toggle="dropdown">
                                                    Add attachment
                                                </button>
                                                <div class="dropdown-menu">
                                                    <a href="#" class="dropdown-item" data-bs-toggle="modal"
                                                       data-bs-target="#modal-markdown-block">
                                                        <span class="fs-5 fw-medium">Text/Code Block</span>
                                                    </a>
                                                    <a href="#" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#modal-team">
                                                        <span class="fs-5 fw-medium">Image</span>
                                                    </a>
                                                </div>
                                            </div>
                                        </span>
                                    </label>
                                    <input asp-for="Title" type="text" class="form-control" placeholder="Title">
                                    <span asp-validation-for="Title" class="text-danger"></span>
                                </div>

                                <div class="row">
                                    <div class="col-xl-6">
                                        <div class="row">
                                            <div class="mb-3">
                                                <div class="form-label">
                                                    Difficulty Level
                                                </div>
                                                <select asp-for="DifficultyLevel" multiple id="selected-difficulty-level" type="text"
                                                        class="form-control">
                                                    @foreach (var value in Enum.GetValues<QuestionDifficultyLevel>())
                                                    {
                                                        <option value="@value">@Enum.GetName(value).Humanize()</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="col-xl-6">
                                        <div class="row">
                                            <div class="mb-3">
                                                <div class="form-label">
                                                    Tags <span class="text-muted">(max @Model.MaxTags) </span>
                                                </div>
                                                <select asp-for="SelectedExistingTagIdentifiers" multiple id="selected-tags" type="text"
                                                        class="form-control">
                                                    @foreach (var tag in await Model.FetchTagsAsync())
                                                    {
                                                        if (Model.SelectedExistingTagIdentifiers.Contains(tag.Id))
                                                        {
                                                            <option value="@tag.Id" selected>@tag.Title</option>
                                                        }
                                                        else
                                                        {
                                                            <option value="@tag.Id">@tag.Title</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal modal-blur fade" id="modal-markdown-block" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Markdown Editor</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <div class="row">
                    <div class="col-lg-12">

                        <div class="card">
                            <div class="card-header">
                                <ul class="nav nav-tabs card-header-tabs nav-fill" data-bs-toggle="tabs">
                                    <li class="nav-item">
                                        <a href="#editor-tab" class="nav-link active" data-bs-toggle="tab">
                                            Editor
                                        </a>
                                    </li>
                                    <li class="nav-item">
                                        <a href="#md-preview-tab-container" class="nav-link" id="md-prev-window-trigger"
                                           data-bs-toggle="tab">
                                            Preview
                                        </a>
                                    </li>
                                </ul>
                            </div>
                            <div class="card-body">
                                <div class="tab-content">
                                    <div class="tab-pane active show" id="editor-tab">
                                        <div class="mb-3">
                                            <div>
                                                <label class="form-label">Body </label>
                                                <textarea id="md-text-area"></textarea>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="tab-pane p-2" id="md-preview-tab-container">
                                        <div id="md-preview-tab"></div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <a href="#" class="btn btn-link link-secondary" data-bs-dismiss="modal">
                    Cancel
                </a>
                <a href="#" class="btn btn-primary ms-auto" data-bs-dismiss="modal">
                    Submit
                </a>
            </div>
        </div>
    </div>
</div>

<script src="~/js/site.js" asp-append-version="true"></script>
<script src="~/lib/jquery/dist/jquery.min.js" asp-append-version="true"></script>
<script src="~/tabler/js/tabler.min.js" asp-append-version="true"></script>
<partial name="_ValidationScriptsPartial"/>

<script>

    const levelSelectorInputBox = new TomSelect(document.getElementById('selected-difficulty-level'), {
        plugins: {
            remove_button: {
                title: 'Remove this item',
            }
        },
        copyClassesToDropdown: false,
        dropdownParent: 'body',
        create: false,
        persist: false,
        maxItems: 1,
        controlInput: '<input>',
        render: {
            item: function (data, escape) {
                if (data.customProperties) {
                    return '<div><span class="dropdown-item-indicator">' + data.customProperties + '</span>' + escape(data.text) + '</div>';
                }
                return '<div>' + escape(data.text) + '</div>';
            },
            option: function (data, escape) {
                if (data.customProperties) {
                    return '<div><span class="dropdown-item-indicator">' + data.customProperties + '</span>' + escape(data.text) + '</div>';
                }
                return '<div>' + escape(data.text) + '</div>';
            },
        },
    });

</script>

<script>
    const tagMaxLength = @Model.TagMaxLength;
    const maxTags = @Model.MaxTags;
    const canCreate = @Html.Raw(JsonSerializer.Serialize(Model.CanCreate));
    const newOptions = new Set();

    const tagSelectorInputBox = new TomSelect(document.getElementById('selected-tags'), {
        plugins: {
            remove_button: {
                title: 'Remove this item',
            }
        },
        create: canCreate,
        maxItems: maxTags,
        persist: false,
        copyClassesToDropdown: false,
        dropdownParent: 'body',
        controlInput: '<input>',
        createFilter: function (input) {
            let processedText = input.toLowerCase();
            if (processedText.length > tagMaxLength) {
                return false;
            }
            let isValid = true;
            for (let key in this.options) {
                if (this.options.hasOwnProperty(key)) {
                    processedText = processedText.trim();
                    if (this.options[key]?.text === processedText) {
                        isValid = false;
                    }
                }
            }
            return isValid;
        },
        onItemAdd: function (value, _) {
            if (this.userOptions.hasOwnProperty(value)) {
                newOptions.add(value.trim());
            }
        },
        render: {
            item: function (data, escape) {
                if (data?.customProperties) {
                    return '<div><span class="dropdown-item-indicator">' + data.customProperties + '</span>' + escape(data.text) + '</div>';
                }
                return '<div>' + escape(data.text) + '</div>';
            },
            option: function (data, escape) {
                if (data?.customProperties) {
                    return '<div><span class="dropdown-item-indicator">' + data.customProperties + '</span>' + escape(data.text) + '</div>';
                }
                return '<div>' + escape(data.text) + '</div>';
            },
        },
    });

    tagSelectorInputBox.on('item_remove', function (value) {
        newOptions.delete(value);
    });

    document.getElementById('md-form').addEventListener('submit', function () {
        const itemsToRemove = [];

        newOptions.forEach(function (value) {
            itemsToRemove.push(value);
            let hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = '@nameof(Model.NewCreatedTags)';
            hiddenInput.value = value;
            document.getElementById('md-form').appendChild(hiddenInput);
        })

        itemsToRemove.forEach(function (item) {
            tagSelectorInputBox.removeItem(item);
        });
    });
</script>

<script>

    markdownEditor("md-form", "md-text-area", "md-prev-window-trigger", "md-preview-tab-container", "md-preview-tab");

    function markdownEditor(formId, textAreaId, previewTabWindowTriggerId, previewTabContainerId, mdPreviewTabId) {
        const replaceRegex = /^[\u200B\u200C\u200D\u200E\u200F\uFEFF]/;
        const emptyTesterRegex = /\b\w+\b/;
        const { markedHighlight } = globalThis.markedHighlight;
        const mdForm = document.getElementById(formId);
        const mdTextArea = document.getElementById(textAreaId);
        const mdPreviewTabWindowTrigger = document.getElementById(previewTabWindowTriggerId);
        const mdPreviewTabContainer = document.getElementById(previewTabContainerId);
        const mdPreviewTab = document.getElementById(mdPreviewTabId);

        const easyMDE = new EasyMDE({
            toolbar: ["bold", "italic", "strikethrough", "|", "heading-1", "heading-2", "heading-3", "|", "code", "quote", "unordered-list", "ordered-list", "|", "link", "undo", "redo", "|", "fullscreen", "guide"],
            element: mdTextArea,
            spellChecker: false,
            autofocus: true,
            tabSize: 2,
        });

        const markedWithSyntaxHighlighter = new marked.Marked(
            markedHighlight({
                langPrefix: 'hljs language-',
                highlight(code, lang, info) {
                    if (hljs.getLanguage(lang)) {
                        return hljs.highlight(code, { language: lang }).value;
                    } else {
                        return hljs.highlightAuto(code).value;
                    }
                }
            })
        );

        const easyMdeContainer = document.querySelector(".EasyMDEContainer");
        let height = easyMdeContainer.clientHeight;

        easyMDE.codemirror.on("change", () => {
            height = easyMdeContainer.clientHeight;

        });

        mdPreviewTabWindowTrigger.addEventListener('focus', function (e) {
            if (emptyTesterRegex.test(easyMDE.value())) {
                mdPreviewTab.innerHTML =
                    DOMPurify.sanitize(markedWithSyntaxHighlighter.parse(easyMDE.value().replace(replaceRegex, "")));

                mdPreviewTabContainer.style.minHeight = height + "px";

            } else {
                mdPreviewTabContainer.style.minHeight = height + "px";

                mdPreviewTab.innerHTML = `
                <div class="empty col" id="md-preview-empty">
                  <div class="empty-img"><img src="/tabler/static/illustrations/undraw_quitting_time_dm8t.svg"
                      height="128" alt="">
                  </div>
                  <p class="empty-title">No preview found</p>
                </div>`;
            }
        });

        //  mdForm.addEventListener('submit', function (e) {
        //      mdTextArea.value = easyMDE.value().replace(replaceRegex, "");
        //   });
    }
    
</script>

</body>

</html>
